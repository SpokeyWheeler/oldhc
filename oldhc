#!/bin/bash
# hc: A quick healthcheck and basic performance tuning recommendation script
# Written by: Spokey Wheeler
# Date: 23 Nov 1999

# Version 0.0a : SW : 23 nov 1999 : onstat -p, checkpoint
#                duration, logical logs, log buffering, foreground writes,
#                no of shared memory segments, activity per AIO VP
#                Still to do : DSS, history logging, queries from hell, more
#                exposition and detail, KAIO

# Version 0.0b : SW : 8 dec 1999 : heavily modified as Solaris
#                doesn't support many "expr" functions (index, length, substr,
#                etc.)-:

# Version 0.0c : SW : 16 dec 1999 : added bufwaits usage check and
#                replaced RA usage with more accurate calculation. Earlier
#                exit from onstat -p check. Remove temporary SQL script.

# Version 0.0d : SW : 20 jan 2000 : added data vs btree buffer
#                allocation check

# Version 0.0e : SW : 5 mar 2000 : added LRU contention check

# Version 0.0f : SW : 6 mar 2000 : changed date order in output
#                file name, and added $outputdir

# Version 0.0g : SW : 10 mar 2000 : added lockwait % check

# Version 0.0h : SW : 27 mar 2000 : added suggestion text for LRU
#                contention, cleaned up spurious lines, added first disk
#                space check, changed logical log display to show actual %

# Version 0.0i : SW : 29 mar 2000 : added user count and ready
#                queue length check

# Version 0.0j : SW : 30 mar 2000 : added buffer allocation
#                actual percentages and dbping

# Version 0.0k : SW : 04 aug 2000 : sbspace disk utilisation change

############################################################################

flotToint() {
    printf "%d\n" "$@"
}

echo "Commencing healthcheck"

# Check environment variables are set

if [ "x$INFORMIXSERVER" = "x" ]
then
	echo "INFORMIXSERVER is not set!"
	exit
fi

if [ "x$INFORMIXDIR" = "x" ]
then
	echo "INFORMIXDIR is not set!"
	exit
fi

if [ "x$ONCONFIG" = "x" ]
then
	echo "ONCONFIG is not set!"
	exit
fi

# Set up constants

numckpts=40
#outputdir=/home/spokey/oldhc
# outfile="${outputdir}/hc.${INFORMIXSERVER}.$(date +%y%m%d.%H%M)"
buffsize=$(onstat -B | tail -2 | head -1 | awk '{print $8}')
buffsize=$(( buffsize / 1024))

# Start work

echo "----------------------------------------------------------------------------"
echo "" 
echo "Healthcheck run on $(date)" 
echo "for \"$INFORMIXSERVER\" instance" 
echo "using \"$ONCONFIG\" configuration file" 
echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

# Check how long the box has been up

if onstat - | grep day > /dev/null 2>&1
then
	echo "No unusual downtime" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "The server has been restarted in the last 24 hours!" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# Interpret onstat -p


cnt=0
for i in $(onstat -p | grep -v bytes | grep "[0-9]")
do
	cnt=$( (( cnt + 1)) )
	case $cnt in
		2)
			pagreads=$i
			;;
		4)
			if [ "$i" -gt 95 ]
			then
				if [ "$i" -ge 99 ]
				then
					echo "Read cache is EXCELLENT! ($i%)" 
					echo "" 
					echo "----------------------------------------------------------------------------" 
					echo "" 
				else
					echo "Read cache is satisfactory ($i%)" 
					echo "" 
					echo "----------------------------------------------------------------------------" 
					echo "" 
				fi
			else
				echo "Read cache is below minimum target of 95% at $i% -- you may need more BUFFERS" 
				echo "in $INFORMIXDIR/etc/$ONCONFIG" 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			fi
			;;
		7)
			bufwrits=$i
			;;
		8)
			if [ "$i" -gt 85 ]
			then
				if [ "$i" -gt 95 ]
				then
					echo "Write cache is EXCELLENT! ($i%)" 
					echo "" 
					echo "----------------------------------------------------------------------------" 
					echo "" 
				else
					echo "Write cache is satisfactory ($i%)" 
					echo "" 
					echo "----------------------------------------------------------------------------" 
					echo "" 
				fi
			else
				echo "Write cache is below minimum target value of 85% at $i% -- you may need" 
				echo "more BUFFERS or you are checkpointing or cleaning buffers too often. This" 
				echo "can be ignored if users are not complaining about write performance" 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			fi
			;;
		35)
			if [ "$i" -gt 0 ]
			then
				echo "Your system has encountered $i deadlock(s) -- this indicates a coding issue" 
				echo "within your application" 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			else
				echo "Your system has not encountered any deadlocks -- this is good." 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			fi
			;;
		36)
			if [ "$i" -gt 0 ]
			then
				echo "Your system has encountered $i lock timeout(s) -- this indicates that some" 
				echo "locks are being held for too long in your system" 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			else
				echo "Your system has not encountered any lock timeouts -- this is good." 
				echo "" 
				echo "----------------------------------------------------------------------------" 
				echo "" 
			fi
			break
			;;
	esac
done

# Assess LRU contention

SPI=$(onstat -g spi|grep -i lru |awk 'BEGIN {w=0} {w=w+$1} END {print w}')

BUF=$(( pagreads + bufwrits ))

if [ "$BUF" -eq 0 ]
then
	LC=0
else
	LC=$(echo "scale=2; $SPI * 100 / $BUF" |bc)
fi

if [ "$LC" -lt 1 ]
then
	echo "LRU Contention is EXCELLENT (${LC}%) (Lower is better)" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "LRU Contention is too high (${LC}%) (Target is 1% or less)" 
	echo "A possible resolution to this is to increase the number of LRUS available in" 
	echo "$INFORMIXDIR/etc/$ONCONFIG" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# Assess last $numckpts checkpoint durations

onlinelog=$(onstat -m | grep "Message Log File" | awk '{ print $4 }')

cnt=0
grep Checkpoint "$onlinelog" | grep uration | tail -"$numckpts" > /tmp/ckpt1.$$
grep Fuzzy /tmp/ckpt1.$$ | awk '{print $7}' > /tmp/ckpt.$$
grep -v Fuzzy /tmp/ckpt1.$$ | awk '{print $6}' >> /tmp/ckpt.$$
while read -r line
do
	if [ "$line" -gt 2 ]
	then
		cnt=$( (( cnt + 1)) )
	fi
done < /tmp/ckpt.$$

rm /tmp/ckpt1.$$ /tmp/ckpt.$$

if [ "$cnt" -gt 0 ]
then
	echo "Warning: $cnt of the last $numckpts checkpoint(s) lasted longer than 2 seconds! You may" 
	echo "need to increase LRUS and/or decrease LRU_MAX_DIRTY and LRU_MIN_DIRTY in" 
	echo "$INFORMIXDIR/etc/$ONCONFIG to address this. You can also extend the" 
	echo "CKPTINTVL so that LRU cleaners have more time to clean the dirty buffers, or" 
	echo "you can decrease the CKPTINTVL so that checkpoints are more frequent, but" 
	echo "hopefully shorter." 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "Checkpoint duration appears satisfactory" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# check physical log buffering

plogbufsz=$(onstat -l | grep " P-" | awk '{print $3}')
plogbufus=$(onstat -l | grep " P-" | awk '{print $6}')

plogbufpc=$(echo "($plogbufus*100/$plogbufsz)/1" | bc)

if [ "$plogbufpc" -gt 85 ]
then
	newsz=$(echo "($buffsize * $plogbufsz + $buffsize)/1" | bc)
	echo "PHYSBUFF can be increased in $INFORMIXDIR/etc/$ONCONFIG" 
	echo "Try setting it to $newsz"
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$plogbufpc" -lt 75 ]
	then
		newsz=$(echo "($buffsize * $plogbufsz - $buffsize)/1" | bc)
		echo "PHYSBUFF can be decreased in $INFORMIXDIR/etc/$ONCONFIG" 
		echo "Try setting it to $newsz"
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	else
		echo "PHYSBUFF appears to be sized correctly in $INFORMIXDIR/etc/$ONCONFIG" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	fi
fi

# check logical log buffering

llogbufsz=$(onstat -l | grep " L-" | awk '{print $3}')
llogbufus=$(onstat -l | grep " L-" | awk '{print $8}')

# convert llogbufus to an int so expr can work with it

llogbufpc=$(echo "($llogbufus*100/$llogbufsz)/1" | bc)

if [ "$llogbufpc" -gt 85 ]
then
	newsz=$(echo "($buffsize * $llogbufsz - $buffsize)/1" | bc)
	echo "LOGBUFF can be increased in $INFORMIXDIR/etc/$ONCONFIG" 
	echo "Try setting it to $newsz"
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$llogbufpc" -lt 75 ]
	then
		if [ "$llogbufsz" -gt 32 ]
		then
			newsz=$(echo "($buffsize * $llogbufsz - $buffsize)/1" | bc)
			echo "LOGBUFF can be decreased in $INFORMIXDIR/etc/$ONCONFIG" 
			echo "Try setting it to $newsz"
			echo "" 
			echo "----------------------------------------------------------------------------" 
			echo "" 
		else
			echo "LOGBUFF appears to be sized correctly in $INFORMIXDIR/etc/$ONCONFIG" 
			echo "" 
			echo "----------------------------------------------------------------------------" 
			echo "" 
		fi
	else
		echo "LOGBUFF appears to be sized correctly in $INFORMIXDIR/etc/$ONCONFIG" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	fi
fi

# check how many newly-added logs there are

cnt=$(echo "SELECT COUNT(*) FROM syslogs WHERE is_new = 1;" | dbaccess sysmaster 2> /dev/null | grep "[0-9]")
if [ "$cnt" -gt 0 ]
then
	echo "You have newly added logical logs. Do an ontape -a to make them available" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# check how much free log space there is

totsz=$(echo "SELECT SUM(size) FROM syslogs WHERE is_new = 0;" | dbaccess sysmaster 2> /dev/null | grep "[0-9]")

{ echo "CREATE TEMP TABLE t1 (t1 INT);" 
echo "INSERT INTO t1 SELECT SUM(size-used) t1 FROM syslogs WHERE is_new = 0;" 
echo "INSERT INTO t1 SELECT SUM(size) t1 FROM syslogs WHERE is_used = 0;"
echo "INSERT INTO t1 SELECT SUM(size) t1 FROM syslogs WHERE is_used = 1 AND is_backed_up = 1;"
echo "SELECT SUM(t1) FROM t1;"
} > t1.sql
totfr=$(dbaccess sysmaster t1 2> /dev/null | grep "[0-9]")

# totfr=$(echo "SELECT SUM(size-used) FROM syslogs WHERE is_new = 1 OR (is_used = 1 AND is_backed_up = 1) OR is_used = 0;" | dbaccess sysmaster 2> /dev/null | grep "[0-9]")

totfrpc=$(echo "($totfr*100/$totsz)/1" | bc)

if [ "$totfrpc" -lt 50 ]
then
	echo "You have less than half your logical log space left ($totfrpc % free). Do an" 
	echo "ontape -a to make more available" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "Logical logs are less than half full ($totfrpc % free) -- this is satisfactory" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi
rm t1.sql

# foreground writes

cnt=$(onstat -F | grep "[0-9]" | grep -v "[a-z]" | grep -v "[A-Z]" | awk '{print $1}')

if [ "$cnt" -gt 0 ]
then
	echo "Warning: You have encountered $cnt foreground write(s). This indicates that" 
	echo "you may need more LRUS and/or more CLEANERS in" 
	echo "$INFORMIXDIR/etc/$ONCONFIG" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "No foreground writes noted -- this is good" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# shared memory usage

cnt=$(onstat -g seg | grep -c " V " | awk '{print $1}')

if [ "$cnt" -gt 1 ]
then
	echo "Warning: You have too many shared memory segments (you should have 1, you" 
	echo "have $cnt) Increase SHMVIRTSIZE and/or SHMADD in" 
	echo "$INFORMIXDIR/etc/$ONCONFIG" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "Shared memory usage appears satisfactory" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi

# Activity per AIO VP

cnt=0
tot=0
belowone=0

for i in $(onstat -g iov | grep '[ak]io' | awk '{print $11}')
do

	cnt=$(( cnt + 1))

	# convert i to an int so  $(( can work with it

	i=$(echo "($i*10)/1" | bc)

	if [ "$i" -lt 10 ]
	then
		belowone=$(( belowone + 1 ))
	fi

	tot=$(( tot + i ))

done

tot=$(( tot / cnt ))

if [ "$belowone" -eq 1 ]
then
	echo "The correct number of AIO/KAIO VPs are configured" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$belowone" -gt 1 ]
	then
		echo "Too many AIO/KAIO VPs are configured ($belowone AIO/KAIO VPs have less than" 
		echo "1 I/O per wakeup, should only be 1)" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	else
		if [ "$tot" -gt 11 ]
		then
			echo "Too few AIO/KAIO VPs are configured (no AIO/KAIO VPs have less than 1 I/O per" 
			echo "wakeup.)" 
			echo "" 
			echo "----------------------------------------------------------------------------" 
			echo "" 
		else
			echo "Too few AIO/KAIO VPs are configured (no AIO/KAIO VPs have less than 1 I/O per wakeup)," 
			echo "but it does not seem to be causing any problems at this stage." 
			echo "" 
			echo "----------------------------------------------------------------------------" 
			echo "" 
		fi
	fi
fi

raperci=$(onstat -p | awk '
/[a-zA-Z]/ {
     for(i=1; i<=NF; i++){
       name[i] = $i;
     }
    }
/[0-9]/ {
     for(i=1; i<=NF; i++){
       content[name[i]] = $i;
     }
    }
END {
    ixdaRA = content["ixda-RA"];
    idxRA = content["idx-RA"];
    daRA = content["da-RA"];
    RApgsused = content["RA-pgsused"];
    print (RApgsused / (ixdaRA + idxRA + daRA)) * 1000;
}
')

raperci=$( echo "$raperci/1" | bc )

bufwperci=$(onstat -p | awk '
/[a-zA-Z]/ {
     for(i=1; i<=NF; i++){
       name[i] = $i;
     }
    }
/[0-9]/ {
     for(i=1; i<=NF; i++){
       content[name[i]] = $i;
     }
    }
END {
    bufwaits = content["bufwaits"];
    bufwrits = content["bufwrits"];
    pagreads = content["pagreads"];
    print ((bufwaits/(pagreads + bufwrits)) * 1000);
}
')

bufwperci=$( echo "$bufwperci/1" | bc )

raperc=$(onstat -p | awk '
/[a-zA-Z]/ {
     for(i=1; i<=NF; i++){
       name[i] = $i;
     }
    }
/[0-9]/ {
     for(i=1; i<=NF; i++){
       content[name[i]] = $i;
     }
    }
END {
    ixdaRA = content["ixda-RA"];
    idxRA = content["idx-RA"];
    daRA = content["da-RA"];
    RApgsused = content["RA-pgsused"];
    print (RApgsused / (ixdaRA + idxRA + daRA)) * 100;
}
')

bufwperc=$(onstat -p | awk '
/[a-zA-Z]/ {
     for(i=1; i<=NF; i++){
       name[i] = $i;
     }
    }
/[0-9]/ {
     for(i=1; i<=NF; i++){
       content[name[i]] = $i;
     }
    }
END {
    bufwaits = content["bufwaits"];
    bufwrits = content["bufwrits"];
    pagreads = content["pagreads"];
    print ((bufwaits/(pagreads + bufwrits)) * 100);
}
')

if [ "$raperci" -ge 990 ]
then
	echo "" 
	echo "Read Ahead buffer usage is EXCELLENT ($raperc %)" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$raperci"  -ge 970 ]
	then
		echo "Read Ahead buffer usage is good ($raperc %)" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	else
		echo "Read Ahead buffer usage is poor ($raperc %)" 
		echo "Consider decreasing RA_PAGES and/or RA_THRESHOLD in" 
		echo "$INFORMIXDIR/etc/$ONCONFIG" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	fi
fi

if [ "$bufwperci" -le 70 ]
then
	echo "Buffer wait ratio is EXCELLENT ($bufwperc %) (lower is better)" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$bufwperci"  -le 150 ]
	then
		echo "Buffer wait ratio is good ($bufwperc %) (lower is better)" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	else
		echo "Buffer wait ratio is poor ($bufwperc %) (lower is better)" 
		echo "Consider increasing LRUS, CLEANERS and/or NUMCPUVPS in" 
		echo "$INFORMIXDIR/etc/$ONCONFIG" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	fi
fi

# lock wait % check

lwperc=$(onstat -p | awk '
/[a-zA-Z]/ {
     for(i=1; i<=NF; i++){
       name[i] = $i;
     }
    }
/[0-9]/ {
     for(i=1; i<=NF; i++){
       content[name[i]] = $i;
     }
    }
END {
    lokwaits = content["lokwaits"];
    lockreqs = content["lockreqs"];
    print (lokwaits / lockreqs) * 100;
}
')

if echo "$lwperc" | grep "e-" > /dev/null 2>&1
then
	lwperc=0.00001
fi

if [ "$lwperc" -le 10 ]
then
	echo "Lock wait ratio is EXCELLENT ($lwperc %) (lower is better)" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	if [ "$lwperc"  -le 50 ]
	then
		echo "Lock wait ratio is acceptable ($lwperc %) (lower is better)" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	else
		echo "Lock wait ratio is poor ($lwperc %)" 
		echo "Examine the isolation levels used by SQL statements plus the overall design" 
		echo "of transaction management" 
		echo "" 
		echo "----------------------------------------------------------------------------" 
		echo "" 
	fi
fi


# data vs btree buffer allocation check

dataperc=$(onstat -P | tail -4 | grep -i data | awk '{print $2}')
btreeperc=$(onstat -P | tail -4 | grep -i btree | awk '{print $2}')
otherperc=$(onstat -P | tail -4 | grep -i other | awk '{print $2}')

btreeperci=$( echo "$btreeperc/1" | bc )
otherperci=$( echo "$otherperc/1" | bc )

echo "$dataperc %  of buffers are allocated to data." 

if [ "$btreeperci" -gt 50 ]
then
	echo "" 
	echo "The percentage of buffers allocated to index data appears dangerously high ($btreeperc %)." 
	echo "You should reboot your server immediately. If this behaviour recurs, you may" 
	echo "have encountered a known or unknown bug. Please contact Informix Technical" 
	echo "Support" 
else
	if [ "$btreeperci" -gt 20 ]
	then
		echo "" 
		echo "The percentage of buffers allocated to indexes seems high ($btreeperc %). If your system is" 
		echo "heavily indexed, this may be normal, otherwise this could be cause for concern" 
	else
		echo "" 
		echo "The percentage of buffers allocated to indexes seems acceptable ($btreeperc %). " 
	fi
fi

if [ "$otherperci" -gt 5 ]
then
	echo "" 
	echo "The percentage of buffers allocated to \"other uses\" seems high ($otherperc %). This" 
	echo "should be investigated" 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
else
	echo "" 
	echo "The percentage of buffers allocated to \"other uses\" seems acceptable ($otherperc %). " 
	echo "" 
	echo "----------------------------------------------------------------------------" 
	echo "" 
fi


# disk utilization check

dbaccess sysmaster <<!EOF 2> /dev/null | grep -v "^$" > /tmp/du1.$$
SELECT TRIM(name), 100 - (SUM(CASE WHEN udfree = -1 THEN nfree ELSE udfree END) * 100 / SUM(chksize))
FROM sysdbspaces, syschunks
WHERE syschunks.dbsnum = sysdbspaces.dbsnum
GROUP BY 1
ORDER BY 1
;
!EOF

while read -r line
do
	line=$( echo "$line" | awk '{print $2}' )
        if echo "$line" | grep "[a-z]" > /dev/null 2>&1
        then
		dbs="$line"
        else
		i=$(printf "%.2f" "$line")
		ii=$( echo "$i/1" | bc )
                if [ "$ii" -gt 70 ]
                then
                        if [ "$ii" -gt 79 ]
                        then
                                echo "$dbs is $i % full -- you will need to add more space URGENTLY!" 
                        else
                                echo "$dbs is $i % full -- you will need to add more space soon" 
                        fi
                else
                        echo "$dbs is $i % full -- this is acceptable" 
                fi
        fi
done < /tmp/du1.$$

rm /tmp/du1.$$

echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

activeu=$(onstat -u | tail -2 | head -1 | awk '{print $1}')
maxu=$(onstat -u | tail -2 | head -1 | awk '{print $5}')

echo "User load (active / maximum) $activeu / $maxu" 
echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

for i in 1 2 3 4 5
do
	onstat -g rea | grep -c sqlexec
	sleep 1
done | awk '{ s += $1 } END  { print "Average ready queue length is", s/NR }' 


echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

min=0.00000
avg=0.00000
max=0.00000

# dbping -n 5 -s 1 | grep "min/avg/max" | awk '{print $5" "$7" "$9}' | read min avg max
for i in 1 2 3 4 5
do
(time dbaccess sysmaster <<!EOF > /dev/null 2>&1
select current from systables where tabid = 1;
!EOF
) &> "/tmp/tm$i.$$"
done

for i in 1 2 3 4 5
do
	m=$(awk '/real/ {print $2}' "/tmp/tm$i.$$"| tr m " " | tr -d s | awk '{print $1}')
	s=$(awk '/real/ {print $2}' "/tmp/tm$i.$$"| tr m " " | tr -d s | awk '{print $2}')
	s=$(echo "$m*60+$s" | bc)
	s=$(printf "%02.8f" "$s")
	if [ "$i" -eq 1 ]
	then
		min=$s
		max=$s
	else
		if (( $(echo "$s > $max" | bc -l) ))
		then
			max=$s
		fi
		if (( $(echo "$s < $min" | bc -l) ))
		then
			min=$s
		fi
	fi
	avg=$(printf "%02.8f" "$avg")
	avg=$( echo "$avg + $s" | bc )
	avg=$(printf "%02.8f" "$avg")
done

avg=$( echo "$avg * 0.200000" | bc )

min=$(printf "%02.3f" "$min")
avg=$(printf "%02.3f" "$avg")
max=$(printf "%02.3f" "$max")

echo "Connection times (min/avg/max) $min / $avg / $max (in seconds)" 
echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

# Yibbida, yibbida, that's all folks....

echo "Healthcheck complete" 
echo "" 
echo "----------------------------------------------------------------------------" 
echo "" 

# clear

# more "${outfile}"
